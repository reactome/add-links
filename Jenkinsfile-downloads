import groovy.json.JsonSlurper
// This Jenkinsfile is used by Jenkins to run the AddLinks-Downloads step of Reactome's release.
// It requires that the ConfirmReleaseConfigs step has been run successfully before it can be run.
pipeline{
	agent any

	stages{
		// This stage checks that an upstream project, ConfirmReleaseConfigs, was run successfully for its last build.
		stage('Check ConfirmReleaseConfigs build succeeded'){
			steps{
				script{
					def currentRelease = (pwd() =~ /Releases\/(\d+)\//)[0][1];
					// This queries the Jenkins API to confirm that the most recent build of ConfirmReleaseConfigs was successful.
					def configStatusUrl = httpRequest authentication: 'jenkinsKey', validResponseCodes: "${env.VALID_RESPONSE_CODES}", url: "${env.JENKINS_JOB_URL}/job/$currentRelease/job/ConfirmReleaseConfigs/lastBuild/api/json"
					if (configStatusUrl.getStatus() == 404) {
						error("ConfirmReleaseConfigs has not yet been run. Please complete a successful build.")
					} else {
						def configStatusJson = new JsonSlurper().parseText(configStatusUrl.getContent())
						if (configStatusJson['result'] != "SUCCESS"){
							error("Most recent ConfirmReleaseConfigs build status: " + configStatusJson['result'] + ". Please complete a successful build.")
						}
					}
				}
			}
		}
		// This stage builds the jar file using maven.
		stage('Setup: Build jar file'){
			steps{
				script{
					sh "mvn clean package -DskipTests"
				}
			}
		}
		// This stage executes the AddLinks file download step. It will download all files needed to run the AddLinks insertion step, storing them
		// at /tmp/addlinks-downloaded-files.
		stage('Main: Download AddLinks files'){
			steps{
			script{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
						sh "cp $ConfigFile src/main/resources/auth.properties"
						sh "ln -sf src/main/resources resources"
						sh "rm -f src/main/resources/db.properties"
						sh """java -cp "\$(pwd)/resources" -Dconfig.location=\$(pwd)/resources/addlinks.properties -Dlog4j.configurationFile=\$(pwd)/resources/log4j2.xml -Xmx${env.JAVA_MEM_MAX}m -jar target/AddLinks-*.jar file://\$(pwd)/resources/file-download-context.xml"""
						sh "rm -f src/main/resources/auth.properties"
					}
				}
			}
		}
	}
}
