import groovy.json.JsonSlurper

pipeline{
	agent any

	stages{
		stage('Check upstream builds succeeded'){
			steps{
				script{
					def configStatusUrl = httpRequest authentication: 'jenkinsKey', url: "${env.JENKINS_JOB_URL}/job/${env.RELEASE_NUMBER}/job/ConfirmReleaseConfigs/lastBuild/api/json"
					def configStatusJson = new JsonSlurper().parseText(configStatusUrl.getContent())
					if(configStatusJson['result'] != "SUCCESS"){
						error("Most recent ConfirmReleaseConfigs build status: " + configStatusJson['result'] + ". Please complete a successful build.")
					}
			    	}	
		    	}
	    	}
        	stage('Setup: Build jar file'){
            		steps{
	    			script{
                    			dir('add-links'){
						sh 'mvn clean package -DskipTests'
                    			}
          	    		}
            		}		
        	}
		stage('Main: Download AddLinks files'){
			steps{
				script{
					dir('add-links'){
						withCredentials([file(credentialsId: 'Config', variable: 'FILE')]){
							sh 'cp $FILE src/main/resources/auth.properties'
							sh 'ln -sf src/main/resources resources'
							sh 'rm -f src/main/resources/db.properties'
					    		sh "java -cp \"$(pwd)/resources\" -Dconfig.location=$(pwd)/resources/addlinks.properties -Dlog4j.configurationFile=$(pwd)/resources/log4j2.xml -jar target/AddLinks-1.1.4-SHADED.jar file://$(pwd)/resources/file-download-context.xml"							
							sh 'rm -f src/main/resources/auth.properties'
						}
					}
				}
			}
		}
    	}
}
