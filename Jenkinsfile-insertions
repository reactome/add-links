// This Jenkinsfile is used by Jenkins to run the AddLinks-Insertion step of Reactome's release.
// It requires that the AddLinks-Download and Orthoinference steps have been run successfully before it can be run.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline{
	agent any

	stages{
		// This stage checks that upstream projects AddLinks-Download and Orthoinference were run successfully for their last build.
		stage('Check AddLinks-Download and Orthoinference builds succeeded'){
			steps{
				script{
					// This queries the Jenkins API to confirm that the most recent builds of AddLinks-Download and Orthoinference were successful.
					utils.checkUpstreamBuildsSucceeded("AddLinks-Download")
					utils.checkUpstreamBuildsSucceeded("Relational-Database-Updates/job/Orthoinference")
	    			}
    			}
  		}
		// Download from S3 the addlinks files that should have been created by the AddLinks-Downloads step.
		stage('Setup: Download AddLinks files from S3 bucket'){
			steps{
				script{
				    def releaseVersion = utils.getReleaseVersion()
					def downloadsArchive = "addlinks-downloads-v${releaseVersion}.tar"
					sh "aws s3 --no-progress cp ${env.S3_RELEASE_DIRECTORY_URL}/${releaseVersion}/add_links/downloads/data/${downloadsArchive}.gz ."
				    	sh "gunzip ${downloadsArchive}.gz"
				    	sh "tar -xvf ${downloadsArchive}"
				 	sh "mv addlinks-downloaded-files/ /tmp/"
					sh "rm $downloadsArchive"
				}
			}
		}
		// This stage backs up the release_current database before it is modified.
		stage('Setup: Backup release_current'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
                        			utils.takeDatabaseDumpAndGzip("${env.RELEASE_CURRENT_DB}", "addlinks", "before", "${env.RELEASE_SERVER}")
					}
				}
			}
		}
		// This stage builds the jar file using maven.
		stage('Setup: Build jar file'){
			steps{
				script{
				    sh "mvn clean package -DskipTests"
				}
			 }
   		 }
		// This stage runs the insertion component of AddLinks. It will build links to various external resources and connect them to the relevant instances.
		// It also connects these linkouts to ReferenceDatabase objects that pertain to their original resource.
		stage('Main: AddLinks Insertions'){
			steps{
				script{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
						// Take personId from config file and update it in addlinks.properties before building jar file.
						updatePersonIdInProperties("${ConfigFile}")
				        
						sh "cp $ConfigFile src/main/resources/auth.properties"
						sh "ln -sf src/main/resources resources"
						sh "rm -f src/main/resources/db.properties"
						sh """java -cp "\$(pwd)/resources" -Dconfig.location=\$(pwd)/resources/addlinks.properties -Dlog4j.configurationFile=\$(pwd)/resources/log4j2.xml -Xmx${env.JAVA_MEM_MAX}m -jar target/AddLinks-*-SHADED.jar file://\$(pwd)/resources/create-references-context.xml"""
						sh "rm -f src/main/resources/auth.properties"
					}
				}
			}
		}
		// This stage backs up the release_current database after it is modified.
		stage('Post: Backup release_current'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
                        utils.takeDatabaseDumpAndGzip("${env.RELEASE_CURRENT_DB}", "addlinks", "after", "${env.RELEASE_SERVER}")
					}
				}
			}
		}
		// This stage archives all logs and database backups produced by AddLink-Insertion.
//		stage('Post: Archive Outputs'){
//			steps{
//				script{
//					def addlinksFolder = "addlinks-downloaded-files/"
//					def dataFiles = []
//					def logFiles = ["reports"]
//					def foldersToDelete = ["reports/", "/tmp/addlinks-downloaded-files/"]
//					
//					utils.cleanUpAndArchiveBuildFiles("add_links/insertions", dataFiles, logFiles, foldersToDelete)
//				}
//			}
		}
  	}
}

// Localized method for swapping the personId from the addlinks.properties file.
// TODO: Add method to shared groovy library.
def updatePersonIdInProperties(configFile) {
    	def personId = sh (
		script: "grep personId $configFile | cut -d = -f2",
		returnStdout: true
	).trim()
	sh "git checkout src/main/resources/addlinks.properties"
    sh "sed -i -e 's/executeAsPersonID=/executeAsPersonID=${personId}/g' src/main/resources/addlinks.properties"
}
