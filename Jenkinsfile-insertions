import groovy.json.JsonSlurper

pipeline{
	agent any

	stages{
		stage('Check upstream builds succeeded'){
			steps{
				script{
					def addLinksDownloadStatusUrl = httpRequest authentication: 'jenkinsKey', url: "${env.JENKINS_JOB_URL}/job/${env.RELEASE_NUMBER}/job/AddLinks-Download/lastBuild/api/json"
					def addLinksDownloadJson = new JsonSlurper().parseText(addLinksDownloadUrl.getContent())
					if(addLinksDownloadJson['result'] != "SUCCESS"){
						error("Most recent AddLinks-Download build status: " + addLinksDownloadJson['result'] + ". Please complete a successful build.")
					}
			    	}
				script{
					def orthoinferenceDownloadStatusUrl = httpRequest authentication: 'jenkinsKey', url: "${env.JENKINS_JOB_URL}/job/${env.RELEASE_NUMBER}/job/Orthoinference/lastBuild/api/json"
					def orthoinferenceJson = new JsonSlurper().parseText(orthoinferenceUrl.getContent())
					if(orthoinferenceJson['result'] != "SUCCESS"){
						error("Most recent Orthoinference build status: " + addLinksDownloadJson['result'] + ". Please complete a successful build.")
					}
			    	}
		    	}
	    	}
		stage('Setup: Backup DB'){
			steps{
				script{
					dir('add-links'){
						withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
							sh "mysqldump -u$user -p$pass ${env.RELEASE_CURRENT} > ${env.RELEASE_CURRENT}_${env.RELEASE_NUMBER}_before_addlinks.dump"
							sh "gzip -f ${env.RELEASE_CURRENT}_${env.RELEASE_NUMBER}_before_addlinks.dump"
						}
					}
				}
			}
		}
		stage('Setup: Build jar file'){
            		steps{
		        	script{
                    			dir('add-links'){
						sh 'mvn clean package -DskipTests'
                    			}
          	    		}
            		}
        	}
		stage('Main: AddLinks Insertions'){
			steps{
				script{
					dir('add-links'){
						withCredentials([file(credentialsId: 'Config', variable: 'FILE')]){
							sh 'cp $FILE src/main/resources/auth.properties'
							sh 'ln -sf src/main/resources resources'
							sh 'rm -f src/main/resources/db.properties'
					    		sh 'java -cp "$(pwd)/resources" -Dconfig.location=$(pwd)/resources/addlinks.properties -Dlog4j.configurationFile=$(pwd)/resources/log4j2.xml -jar target/AddLinks-1.1.4-SHADED.jar file://$(pwd)/resources/create-references-context.xml'
							sh 'rm src/main/resources/auth.properties'
						}
					}
				}
			}
		}
		stage('Post: Backup DB'){
			steps{
				script{
					dir('add-links'){
						withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
							sh "mysqldump -u$user -p$pass ${env.RELEASE_CURRENT} > ${env.RELEASE_CURRENT}_${env.RELEASE_NUMBER}_after_addlinks.dump"
							sh "gzip ${env.RELEASE_CURRENT}_${env.RELEASE_NUMBER}_after_addlinks.dump"
						}
					}
				}
			}
		}
		stage('Post:Archive logs and backups'){
			steps{
				script{
					dir('add-links'){
						sh "mkdir -p archive/${env.RELEASE_NUMBER}/logs"
						sh "mv --backup=numbered *_${env.RELEASE_NUMBER}_*.dump.gz archive/${env.RELEASE_NUMBER}/"
						sh "gzip logs/*.log"
						sh "gzip logs/retrievers/*"
						sh "gzip logs/*.log logs/retrievers/* logs/file-processors/* logs/refCreators/*"
						sh "mv logs/* archive/${env.RELEASE_NUMBER}/logs"
					}
				}
			}
		}
    	}
}
