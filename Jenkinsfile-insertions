import groovy.json.JsonSlurper
// This Jenkinsfile is used by Jenkins to run the AddLinks-Insertion step of Reactome's release.
// It requires that the AddLinks-Download and Orthoinference steps have been run successfully before it can be run.
def currentRelease
def previousRelease
pipeline{
	agent any

	stages{
		// This stage checks that upstream projects AddLinks-Download and Orthoinference were run successfully for their last build.
		stage('Check AddLinks-Download and Orthoinference builds succeeded'){
			steps{
				script{
					currentRelease = (pwd() =~ /Releases\/(\d+)\//)[0][1];
					previousRelease = (pwd() =~ /Releases\/(\d+)\//)[0][1].toInteger() - 1;
					// This queries the Jenkins API to confirm that the most recent builds of AddLinks-Download and Orthoinference were successful.
					checkUpstreamBuildsSucceeded("AddLinks-Download", "$currentRelease")
					checkUpstreamBuildsSucceeded("Relational-Database-Updates/job/Orthoinference", "$currentRelease")
	    			}
    			}
  		}
  	}
}

// Utility function that checks upstream builds of this project were successfully built.
def checkUpstreamBuildsSucceeded(String stepName, String currentRelease) {
	def statusUrl = httpRequest authentication: 'jenkinsKey', validResponseCodes: "${env.VALID_RESPONSE_CODES}", url: "${env.JENKINS_JOB_URL}/job/$currentRelease/job/$stepName/lastBuild/api/json"
	if (statusUrl.getStatus() == 404) {
		error("$stepName has not yet been run. Please complete a successful build.")
	} else {
		def statusJson = new JsonSlurper().parseText(statusUrl.getContent())
		if(statusJson['result'] != "SUCCESS"){
			error("Most recent $stepName build status: " + statusJson['result'] + ". Please complete a successful build.")
		}
	}
}
