import groovy.json.JsonSlurper
// This Jenkinsfile is used by Jenkins to run the AddLinks-Insertion step of Reactome's release.
// It requires that the AddLinks-Download and Orthoinference steps have been run successfully before it can be run.
def currentRelease
def previousRelease
pipeline{
	agent any

	stages{
		// This stage checks that upstream projects AddLinks-Download and Orthoinference were run successfully for their last build.
		stage('Check AddLinks-Download and Orthoinference builds succeeded'){
			steps{
				script{
					currentRelease = (pwd() =~ /Releases\/(\d+)\//)[0][1];
					previousRelease = (pwd() =~ /Releases\/(\d+)\//)[0][1].toInteger() - 1;
					// This queries the Jenkins API to confirm that the most recent builds of AddLinks-Download and Orthoinference were successful.
					checkUpstreamBuildsSucceeded("AddLinks-Download", "$currentRelease")
					checkUpstreamBuildsSucceeded("Relational-Database-Updates/job/Orthoinference", "$currentRelease")
	    			}
    			}
  		}
		stage('Setup: Download AddLinks files from S3 bucket'){
			steps{
				script{
					def downloadsArchive = "addlinks-downloads-v${currentRelease}.tgz"
					sh "aws s3 --no-progress cp ${env.S3_RELEASE_DIRECTORY_URL}/${currentRelease}/add_links/downloads/data/$downloadsArchive ."
					sh "tar -xvf $downloadsArchive"
					sh "mv addlinks-downloaded-files/ /tmp/"
					sh "rm $downloadsArchive"
				}
			}
		}
		// This stage backs up the release_current database before it is modified.
		stage('Setup: Backup release_current'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						def release_current_before_addlinks_dump = "${env.RELEASE_CURRENT}_${currentRelease}_before_addlinks.dump"
						sh "mysqldump -u$user -p$pass ${env.RELEASE_CURRENT} > $release_current_before_addlinks_dump"
						sh "gzip -f $release_current_before_addlinks_dump"
					}
				}
			}
		}
		// This stage builds the jar file using maven.
		stage('Setup: Build jar file'){
			steps{
				script{
					sh "mvn clean package -DskipTests"
				}
			 }
   		 }
		// This stage runs the insertion component of AddLinks. It will build links to various external resources and connect them to the relevant instances.
		// It also connects these linkouts to ReferenceDatabase objects that pertain to their original resource.
		stage('Main: AddLinks Insertions'){
			steps{
				script{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
						sh "cp $ConfigFile src/main/resources/auth.properties"
						sh "ln -sf src/main/resources resources"
						sh "rm -f src/main/resources/db.properties"
						sh """java -cp "\$(pwd)/resources" -Dconfig.location=\$(pwd)/resources/addlinks.properties -Dlog4j.configurationFile=\$(pwd)/resources/log4j2.xml -Xmx${env.JAVA_MEM_MAX}m -jar target/AddLinks-*-SHADED.jar file://\$(pwd)/resources/create-references-context.xml"""
						sh "rm -f src/main/resources/auth.properties"
					}
				}
			}
		}
		// This stage backs up the release_current database after it is modified.
		stage('Post: Backup release_current'){
			steps{
				script{
					dir('add-links'){
						withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
							def release_current_after_addlinks_dump = "${env.RELEASE_CURRENT}_${currentRelease}_after_addlinks.dump"
							sh "mysqldump -u$user -p$pass ${env.RELEASE_CURRENT} > $release_current_after_addlinks_dump"
							sh "gzip $release_current_after_addlinks_dump"
						}
					}
				}
			}
		}
		// This stage archives all logs and database backups produced by AddLink-Insertion.
		stage('Post: Archive Outputs'){
			steps{
				script{
					def s3Path = "${env.S3_RELEASE_DIRECTORY_URL}/${currentRelease}/add_links/insertions"
					def addlinksFolder = "addlinks-downloaded-files/"
					sh "mkdir -p databases/"
					sh "mv --backup=numbered *_${currentRelease}_*.dump.gz databases/"
					sh "gzip -r logs/* reports/*"
					sh "aws s3 --no-progress --recursive cp databases/ $s3Path/databases/"
					sh "aws s3 --no-progress --recursive cp logs/ $s3Path/logs/"
					sh "aws s3 --no-progress --recursive cp reports/ $s3Path/reports/"
					sh "rm -r logs databases reports /tmp/$addlinksFolder"
				}
			}
		}
  	}
}

// Utility function that checks upstream builds of this project were successfully built.
def checkUpstreamBuildsSucceeded(String stepName, String currentRelease) {
	def statusUrl = httpRequest authentication: 'jenkinsKey', validResponseCodes: "${env.VALID_RESPONSE_CODES}", url: "${env.JENKINS_JOB_URL}/job/$currentRelease/job/$stepName/lastBuild/api/json"
	if (statusUrl.getStatus() == 404) {
		error("$stepName has not yet been run. Please complete a successful build.")
	} else {
		def statusJson = new JsonSlurper().parseText(statusUrl.getContent())
		if(statusJson['result'] != "SUCCESS"){
			error("Most recent $stepName build status: " + statusJson['result'] + ". Please complete a successful build.")
		}
	}
}
